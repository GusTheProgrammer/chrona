name: Build and Publish

on:
  pull_request:
    branches: [main]
    types: [closed]
  workflow_dispatch:

env:
  GH_REGISTRY: ghcr.io/gustheprogrammer
  IMAGE_NAME: chrona-app
  NEXT_PUBLIC_API_URL: "https://chrona.gusondabus.com/api"

jobs:
  prepare_release:
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Fetch All Tags
        run: git fetch --tags

      - name: Get Previous Tag
        id: previoustag
        run: |
          TAG=$(git tag --sort=-v:refname | head -n1)
          if [ -z "$TAG" ]; then
            TAG="0.0.0"
          fi
          echo "Previous tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Calculate Next Minor Version
        id: semver
        run: |
          npm install -g semver
          PREVIOUS_TAG="${{ steps.previoustag.outputs.tag }}"
          NEW_VERSION=$(semver -i minor "$PREVIOUS_TAG")
          # Loop until we find a version that doesn't exist
          while git rev-parse "refs/tags/$NEW_VERSION" >/dev/null 2>&1; do
            echo "Tag $NEW_VERSION already exists, incrementing further."
            NEW_VERSION=$(semver -i minor "$NEW_VERSION")
          done
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Output Versions for Debugging
        run: |
          echo "Previous tag: ${{ steps.previoustag.outputs.tag }}"
          echo "New version: ${{ steps.semver.outputs.new_version }}"

  test:
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    needs: prepare_release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

  build_and_push:
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    needs: [test, prepare_release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Environment Variables
        run: |
          echo NEXT_PUBLIC_API_URL="${NEXT_PUBLIC_API_URL}" >> .env

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GH_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ needs.prepare_release.outputs.new_version }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ needs.prepare_release.outputs.new_version }} ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare_release.outputs.new_version }}

      - name: Push Docker Image to GitHub Container Registry
        run: |
          docker push ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare_release.outputs.new_version }}

      - name: Create or Update GitHub Release
        uses: actions/github-script@v6
        with:
          script: |
            const newVersion = '${{ needs.prepare_release.outputs.new_version }}';
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            try {
              // Check if the release already exists
              const release = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: newVersion,
              });

              // Update the existing release
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: release.data.id,
                tag_name: newVersion,
                name: 'Release ' + newVersion,
                body: 'Docker Image: ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:' + newVersion,
              });
              console.log(`Updated existing release for tag ${newVersion}.`);
            } catch (error) {
              if (error.status === 404) {
                // Create a new release
                await github.rest.repos.createRelease({
                  owner,
                  repo,
                  tag_name: newVersion,
                  name: 'Release ' + newVersion,
                  body: 'Docker Image: ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:' + newVersion,
                });
                console.log(`Created new release for tag ${newVersion}.`);
              } else {
                throw error;
              }
            }
