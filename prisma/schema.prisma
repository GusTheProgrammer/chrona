generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  email               String   @unique
  name                String
  image               String?
  mobile              Int?
  address             String?
  bio                 String?
  password            String
  confirmed           Boolean  @default(false)
  blocked             Boolean  @default(false)
  resetPasswordToken  String?
  resetPasswordExpire BigInt?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  role      Role        @relation(fields: [roleId], references: [id], onDelete: Restrict)
  roleId    String
  Team      Team?       @relation(fields: [teamId], references: [id])
  teamId    String?     @db.VarChar(21)
  Scheduler Scheduler[]
  Holiday   Holiday[]

  @@map("users")
}

model Role {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String   @unique
  type        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users             User[]
  permissions       Permission[]
  clientPermissions ClientPermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String
  method      Method
  route       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@unique([method, route])
  @@map("permissions")
}

model ClientPermission {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String   @unique
  sort        Int
  menu        String
  path        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@map("client_permissions")
}

model Team {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users     User[]
  Scheduler Scheduler[]

  @@map("teams")
}

model Scheduler {
  id      String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  userId  String
  teamId  String
  shiftId String
  date    DateTime

  user  User  @relation(fields: [userId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])
  shift Shift @relation(fields: [shiftId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("schedulers")
}

model Shift {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name      String
  color     String
  code      String   @unique
  startTime DateTime
  endTime   DateTime

  schedulers Scheduler[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shifts")
}

model Holiday {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String?

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("holidays")
}

view SchedulerCalendar {
  scheduler_id String    @id
  datestamp    DateTime
  fullname     String?
  email        String?
  team_name    String?
  shift_name   String?
  shift_color  String?
  shift_code   String?
  start_time   DateTime?
  end_time     DateTime?

  @@map("SchedulerCalendar")
}

enum Method {
  GET
  POST
  PUT
  DELETE
}
